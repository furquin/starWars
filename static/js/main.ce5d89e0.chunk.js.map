{"version":3,"sources":["Context/GlobalContext.js","components/Filters/FilterByName.js","components/Filters/FilterByValues.js","components/Table/index.js","service/fetchAPI.js","Context/GlobalProvider.js","App.js","index.js"],"names":["Context","createContext","FilterByName","useContext","GlobalContext","filterName","setFilterName","name","filterByName","type","id","data-testid","placeholder","value","onChange","target","FilterByValues","optionsColumn","SetOptionsColumn","comparisons","column","setColumn","comparison","setComparison","setValue","planetList","setPlanetList","map","option","index","key","comparisonOption","onClick","valuesFiltered","parseInt","planetsFiltered","filter","planet","Table","data","nameSearch","arrayFilter","includes","length","result","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","created","edited","url","fetchApi","a","fetch","then","json","results","item","residents","response","GlobalProvider","children","useState","dataPlanetList","useEffect","Provider","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ce5d89e0.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst Context = createContext();\n\nexport default Context;\n","import React, { useContext } from 'react';\nimport GlobalContext from '../../Context/GlobalContext';\n\nconst FilterByName = () => {\n  const { filterName, setFilterName } = useContext(GlobalContext);\n  const { name } = filterName.filterByName;\n\n  const handleChange = ({ target: { value } }) => {\n    setFilterName({ filterByName: { name: value } });\n  };\n\n  return (\n    <input\n      type=\"text\"\n      name=\"name-filter\"\n      id=\"name-filter\"\n      data-testid=\"name-filter\"\n      placeholder=\"Insira o nome do planeta\"\n      value={ name }\n      onChange={ handleChange }\n    />\n  );\n};\n\nexport default FilterByName;\n","import React, { useContext } from 'react';\nimport GlobalContext from '../../Context/GlobalContext';\n\nexport default function FilterByValues() {\n  const {\n    optionsColumn,\n    SetOptionsColumn,\n    comparisons,\n    column,\n    setColumn,\n    comparison,\n    setComparison,\n    value,\n    setValue,\n    planetList,\n    setPlanetList,\n  } = useContext(GlobalContext);\n\n  //!  função consultada no repositório do Cristiano Terra https://github.com/tryber/sd-016-a-project-starwars-planets-search/pull/82/commits/d24d4a8fe8eb69e9b2de8e6159dfa2803dd6d6ec\n\n  const filterColumn = ({ target }) => {\n    setColumn(target.value);\n  };\n\n  const filterComparison = ({ target }) => {\n    setComparison(target.value);\n  };\n\n  const filterValue = ({ target }) => {\n    setValue(target.value);\n  };\n\n  const onClickChange = () => {\n    const valuesFiltered = parseInt(value, 10);\n    const planetsFiltered = planetList.filter((planet) => {\n      if (comparison === 'menor que') {\n        return planet[column] < valuesFiltered;\n      }\n      if (comparison === 'maior que') {\n        return planet[column] > valuesFiltered;\n      }\n      return planet[column] === value;\n    });\n\n    SetOptionsColumn(optionsColumn.filter((option) => option !== column));\n    setPlanetList(planetsFiltered);\n  };\n  return (\n    <div>\n      <select\n        data-testid=\"column-filter\"\n        onChange={ filterColumn }\n        name=\"column\"\n        value={ column }\n      >\n        {optionsColumn.map((option, index) => (\n          <option key={ index } value={ option }>\n            {option}\n          </option>\n        ))}\n      </select>\n\n      <select\n        data-testid=\"comparison-filter\"\n        onChange={ filterComparison }\n        name=\"comparison\"\n        value={ comparison }\n      >\n        {comparisons.map((comparisonOption, index) => (\n          <option key={ index } value={ comparisonOption }>\n            {comparisonOption}\n          </option>\n        ))}\n      </select>\n\n      <input\n        type=\"number\"\n        name=\"value\"\n        data-testid=\"value-filter\"\n        value={ value }\n        onChange={ filterValue }\n      />\n\n      <button type=\"button\" onClick={ onClickChange } data-testid=\"button-filter\">\n        Filtrar\n      </button>\n    </div>\n  );\n}\n","import React, { useContext } from 'react';\nimport './style.css';\nimport GlobalContext from '../../Context/GlobalContext';\n\nfunction Table() {\n  const {\n    planetList,\n    filterName,\n  } = useContext(GlobalContext);\n\n  const { name } = filterName.filterByName;\n\n  const filters = (data, nameSearch) => {\n    if (!data) return [];\n\n    if (nameSearch) {\n      return data.filter((planet) => planet.name.includes(nameSearch));\n    }\n\n    return data;\n  };\n\n  const arrayFilter = filters(planetList, name);\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th>name</th>\n            <th>rotation_period</th>\n            <th>orbital_period</th>\n            <th>diameter</th>\n            <th>climate</th>\n            <th>gravity</th>\n            <th>terrain</th>\n            <th>surface_water</th>\n            <th>population</th>\n            <th>films</th>\n            <th>created</th>\n            <th>edited</th>\n            <th>url</th>\n          </tr>\n        </thead>\n        <tbody>\n          {arrayFilter.length > 0\n            && arrayFilter.map((result) => (\n              <tr key={ result.name }>\n                <td>{result.name}</td>\n                <td>{result.rotation_period}</td>\n                <td>{result.orbital_period}</td>\n                <td>{result.diameter}</td>\n                <td>{result.climate}</td>\n                <td>{result.gravity}</td>\n                <td>{result.terrain}</td>\n                <td>{result.surface_water}</td>\n                <td>{result.population}</td>\n                <td>{result.films}</td>\n                <td>{result.created}</td>\n                <td>{result.edited}</td>\n                <td>{result.url}</td>\n              </tr>\n            ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\nexport default Table;\n","const fetchApi = async () => {\n  const response = await fetch(\n    'https://swapi-trybe.herokuapp.com/api/planets/',\n  )\n    .then((data) => data.json())\n    .then((data) => data.results)\n    .then((data) => data.map((item) => {\n      delete item.residents;\n      return item;\n    }));\n  return response;\n};\n\nexport default fetchApi;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport GlobalContext from './GlobalContext';\nimport fetchApi from '../service/fetchAPI';\n\nexport default function GlobalProvider({ children }) {\n  const [planetList, setPlanetList] = useState([]);\n  const [column, setColumn] = useState('population');\n  const [comparison, setComparison] = useState('maior que');\n  const [value, setValue] = useState(0);\n  const [filterName, setFilterName] = useState({ filterByName: { name: '' } });\n  const [optionsColumn, SetOptionsColumn] = useState(\n    ['population',\n      'orbital_period',\n      'diameter',\n      'rotation_period',\n      'surface_water'],\n  );\n  const [comparisons] = useState(['maior que', 'menor que', 'igual a']);\n\n  const dataPlanetList = async () => {\n    const response = await fetchApi();\n    setPlanetList(response);\n  };\n\n  useEffect(() => {\n    dataPlanetList();\n  }, []);\n\n  return (\n    <GlobalContext.Provider\n      value={ {\n        planetList,\n        setPlanetList,\n        filterName,\n        setFilterName,\n        optionsColumn,\n        SetOptionsColumn,\n        comparisons,\n        column,\n        setColumn,\n        value,\n        setValue,\n        comparison,\n        setComparison,\n\n      } }\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n}\n\nGlobalProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import React from 'react';\nimport FilterByName from './components/Filters/FilterByName';\nimport FilterByValues from './components/Filters/FilterByValues';\nimport Table from './components/Table';\nimport GlobalProvider from './Context/GlobalProvider';\n\nexport default function App() {\n  return (\n    <GlobalProvider>\n\n      <FilterByName />\n      <FilterByValues />\n      <Table />\n    </GlobalProvider>);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}